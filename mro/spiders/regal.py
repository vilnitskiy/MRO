# -*- coding: utf-8 -*-
import pandas as pd
import scrapy
from mro.items import RegalItem
import urllib
import urllib2
import shutil
from scrapy.contrib.spiders import CrawlSpider
from scrapy.http import FormRequest
import re
import zipfile
import os


out = pd.read_csv("spiders/csv_data/Regal/regal_new.csv", sep=',')
catalog = list(out.catalog_number)
ids = list(out.id)
catalog_ids = dict(zip(catalog, ids))


class RegalptsCrawl(CrawlSpider):
	name = "regalpts"

	def start_requests(self):
		for row in out['catalog_number']:
			yield self.request(row)

	def request(self, meta_row):
		row = str(meta_row).strip()
		url = 'http://edge.regalpts.com/EDGE/CAD/Default.aspx?SS=yes'
		formdata = {
		'__EVENTTARGET':'',
		'__EVENTARGUMENT':'',
		'__VIEWSTATE': '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AmRkFCsAAmRkFCsAAmRkFCsAAg8WAh8EaGRkFCsAAg8WAh8EaGRkDxYGZmZmZmZmFgEFdFRlbGVyaWsuV2ViLlVJLlJhZFBhbmVsSXRlbSwgVGVsZXJpay5XZWIuVUksIFZlcnNpb249MjAxNS4xLjQwMS4zNSwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj0xMjFmYWU3ODE2NWJhM2Q0DxYLZmZmZmZmZmZmZmYWAQV0VGVsZXJpay5XZWIuVUkuUmFkUGFuZWxJdGVtLCBUZWxlcmlrLldlYi5VSSwgVmVyc2lvbj0yMDE1LjEuNDAxLjM1LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPTEyMWZhZTc4MTY1YmEzZDQUKwACZGQUKwACDxYEHgtOYXZpZ2F0ZVVybAUTRGVmYXVsdC5hc3B4P1NTPXllcx4EVGV4dAUFTG9naW5kZA8WBGZmZmYWAQV0VGVsZXJpay5XZWIuVUkuUmFkUGFuZWxJdGVtLCBUZWxlcmlrLldlYi5VSSwgVmVyc2lvbj0yMDE1LjEuNDAxLjM1LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPTEyMWZhZT' + 
        'c4MTY1YmEzZDRkFgZmDw8WAh8EaBYCHwUFCkNsaWVudFNpZGUWEGYPDxYCHwRoZGQCAQ8PFgIfBGhkFgRmDw8WAh8EaGRkAgMPDxYCHwRoZGQCAg8PFgIfBGhkFgRmDw8WAh8EaGRkAgEPDxYCHwRoZGQCAw8PFgIfBGhkFgxmDw8WAh8EaGRkAgEPDxYCHwRoZGQCAg8PFgIfBGhkZAIDDw8WAh8EaGRkAgQPDxYCHwRoZGQCBQ8PFgIfBGhkZAIEDw8WAh8EaGRkAgUPDxYCHwRoZGQCBw8PFgIfBGhkZAIIDw8WAh8EaGRkAgEPZBYSAgEPDxYCHwRoZBYEAgYPD2QWAh8GBSdzaG93TmVtYVN0YW5kYXJkc1dpbmRvdygpO3JldHVybiBmYWxzZTtkAgcPD2QWAh8GBSZzaG93SUVDU3RhbmRhcmRzV2luZG93KCk7cmV0dXJuIGZhbHNlO2QCAg8PFgIfBGhkZAIEDw8WAh8EaGRkAgUPDxYCHwRoZBYEZg8PFgIfBGhkZAICDw8WAh8EaGRkAgYPDxYCHwRoZGQCBw8PFgIfBGhkZAIIDw8WAh8EaGRkAgkPDxYCHwRoZGQCCg8PFgIfBGhkFgQCBA8PFgIfBGhkZAIFDw8WAh8EaGRkAgMPDxYEHwcFE0RlZmF1bHQuYXNweD9TUz15ZXMfCAUFTG9naW5kZAIBD2QWAgICD2QWBGYPZBYGAgEPDxYCHwRoZGQCAw8PFgIfBGhkZAIFDw8WAh8EaGRkAgEPDxYCHwRnZBYEAgcPFCsAAhQrAAIUKwACDxYKHwFnHwILKwQBHgtfIURhdGFCb3VuZGcfAGcfA2hkDxQrAAMUKwACDxYGHwgFBFJPT1QeBVZhbHVlBQEwHghFeHBhbmRlZGdkEBYKZgIBAgICAwIEAgUCBgIHAggCCRYKFCsAAg8WBB8IBQhCZWFyaW5ncx8KBQQzNTcxZBAWAmYCARYCFCsAAg8WBB8IBRBNb3VudGVkIEJlYXJpbmdzHwoFBDM1NzJkEBYGZgIBAgICAwIEAgUWBhQrAAIPFgQfCAUTQmVhcmluZyBBY2Nlc3Nvcmllcx8KBQQzNjIwZBAWAmYCARYCFCsAAg8WBB8IBSRTZWFsbWFzdGVyIEJlYXJpbmcgQmFjayBTaWRlIFNoaWVsZHMfCgUEMzYyMWRkFCsAAg8WBB8IBRtTZWFsbWFzdGVyIEJlYXJpbmcgRW5kIENhcHMfCgUEMzYyMmRkDxYCZmYWAQVzVGVsZXJpay5XZWIuVUkuUmFkVHJlZU5vZGUsIFRlbGVyaWsuV2ViLlVJLCBWZXJzaW9uPTIwMTUuMS40MDEuMzUsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49MTIxZmFlNzgxNjViYTNkNBQrAAIPFgQfCAUVTW91bnRlZCBCYWxsIEJlYXJpbmdzHwoFBDM1NzNkEBYMZgIBAgICAwIEAgUCBgIHAggCCQIKAgsWDBQrAAIPFgQfCAUZQSAtIFR3byBCb2x0IFBpbGxvdyBCbG9jax8KBQQyMTAzZGQUKwACDxYEHwgFGkIgLSBGb3VyIEJvbHQgUGlsbG93IEJsb2NrHwoFBDIxMDRkZBQrAAIPFgQfCAUcQyAtIFRhcHBlZCBCYXNlIFBpbGxvdyBCbG9jax8KBQQyMTA1ZGQUKwACDxYEHwgFFEQgLSBGb3VyIEJvbHQgRmxhbmdlHwoFBDIxMDlkZBQrAAIPFgQfCAUTRSAtIFR3byBCb2x0IEZsYW5nZR8KBQQyMTA3ZGQUKwACDxYEHwgFFUYgLSBUaHJlZSBCb2x0IEZsYW5nZR8KBQQyMTEwZGQUKwACDxYEHwgFHUcgLSBQaWxvdGVkIEZsYW5nZWQgQ2FydHJpZGdlHwoFBDIxMTFkZBQrAAIPFgQfCAUQSCAtIEhhbmdlciBVbml0cx8KBQQyMTE1ZGQUKwACDxYEHwgFGUkgLSBDeWxpbmRyaWNhbCBDYXJ0cmlkZ2UfCgUEMjExM2RkFCsAAg8WBB8IBRxKIC0gU2lkZSBNb3VudCBUYWtlLXVwIFVuaXRzHwoFBDIxMTdkZBQrAAIPFgQfCAULSyAtIEluc2VydHMfCgUEMjExOGRkFCsAAg8WBB8IBRJMIC0gVGFrZS1VcCBCbG9ja3MfCgUEMjExNmRkDxYMZmZmZmZmZmZmZmZmFgEFc1RlbGVyaWsuV2ViLlVJLlJhZFRyZWVOb2RlLCBUZWxlcmlrLldlYi5VSSwgVmVyc2lvbj0yMDE1LjEuNDAxLjM1LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPTEyMWZhZTc4MTY1YmEzZDQUKwACDxYEHwgFH01vdW50ZWQgVGFwZXJlZCBSb2xsZXIgQmVhcmluZ3MfCgUEMzYxMWQQFgZmAgECAgIDAgQCBRYGFCsAAg8WBB8IBRlBIC0gVHdvIEJvbHQgUGlsbG93IEJsb2NrHwoFBDM2MTJkZBQrAAIPFgQfCAUaQiAtIEZvdXIgQm9sdCBQaWxsb3cgQmxvY2sfCgUEMzYxM2RkFCsAAg8WBB8IBRRDIC0gRm91ciBCb2x0IEZsYW5nZR8KBQQzNjE0ZGQUKwACDxYEHwgFHEQgLSBQaWxvdGVkIEZsYW5nZSBDYXJ0cmlkZ2UfCgUEMzYxNWRkFCsAAg8WBB8IBRFFIC0gVGFrZSBVcCBVbml0cx8KBQQzNjE4ZGQUKwACDxYEHwgFC0YgLSBJbnNlcnRzHwoFBDM2MTlkZA8WBmZmZmZmZhYBBXNUZWxlcmlrLldlYi5VSS5SYWRUcmVlTm9kZSwgVGVsZXJpay5XZWIuVUksIFZlcnNpb249MjAxNS4xLjQwMS4zNSwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj0xMjFmYWU3ODE2NWJhM2Q0FCsAAg8WBB8IBSxTZWFsbWFzdGVyIE1vdW50ZWQgU3BoZXJpY2FsIFJvbGxlciBCZWFyaW5ncx8K'+
        ''+
        'IBSVHIC0gU2lkZSBHdWlkZSBCcmFja2V0cyAmIEFjY2Vzc29yaWVzHwoFBDM2NDhkEBYEZgIBAgICAxYEFCsAAg8WBB8IBTRBIC0gU3lzdGVtIFBsYXN0IFNpZGUgR3VpZGUgQnJhY2tldHMgLSBUaGVybW9wbGFzdGljHwoFBDM2NDlkZBQrAAIPFgQfCAU2QiAtIFN5c3RlbSBQbGFzdCBTaWRlIEd1aWRlIEJyYWNrZXRzIC0gU3RhaW5sZXNzIFN0ZWVsHwoFBDM2NTBkZBQrAAIPFgQfCAU1QyAtIFN5c3RlbSBQbGFzdCBTcGVlZHNldCBTaWRlZ3VpZGUgQWRqdXN0bWVudCBTeXN0ZW0fCgUEMzY1MWRkFCsAAg8WBB8IBSlEIC0gU3lzdGVtIFBsYXN0IFBob3RvY2VsbCBDbGFtcCBBc3NlbWJseR8KBQQzNjUyZGQPFgRmZmZmFgEFc1RlbGVyaWsuV2ViLlVJLlJhZFRyZWVOb2RlLCBUZWxlcmlrLldlYi5VSSwgVmVyc2lvbj0yMDE1LjEuNDAxLjM1LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPTEyMWZhZTc4MTY1YmEzZDQUKwACDxYEHwgFF0ggLSBGcmFtZXMgYW5kIFN1cHBvcnRzHwoFBDM2NTdkEBYBZhYBFCsAAg8WBB8IBTZTeXN0ZW0gUGxhc3QgQ29tcG9uZW50cyBGb3IgRnJhbWUgb2YgQ29udmV5aW5nIFN5c3RlbXMfCgUEMzY1OGRkDxYBZhYBBXNUZWxlcmlrLldlYi5VSS5SYWRUcmVlTm9kZSwgVGVsZXJpay5XZWIuVUksIFZlcnNpb249MjAxNS4xLjQwMS4zNSwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj0xMjFmYWU3ODE2NWJhM2Q0FCsAAg8WBB8IBRpJIC0gTWlzY2VsbGFuZW91cyBQcm9kdWN0cx8KBQQzNjU5ZBAWAmYCARYCFCsAAg8WBB8IBSBBLiBTeXN0ZW0gUGxhc3QgTWFjaGluZSBHdWFyZGluZx8KBQQzNjYwZGQUKwACDxYEHwgFGkIuIFN5c3RlbSBQbGFzdCBDb21wb25lbnRzHwoFBDM2NjFkZA8WAmZmFgEFc1RlbGVyaWsuV2ViLlVJLlJhZFRyZWVOb2RlLCBUZWxlcmlrLldlYi5VSSwgVmVyc2lvbj0yMDE1LjEuNDAxLjM1LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPTEyMWZhZTc4MTY1YmEzZDQUKwACDxYEHwgFC0ouIExldmVsZXJzHwoFBDM2NjJkZA8WCWZmZmZmZmZmZhYBBXNUZWxlcmlrLldlYi5VSS5SYWRUcmVlTm9kZSwgVGVsZXJpay5XZWIuVUksIFZlcnNpb249MjAxNS4xLjQwMS4zNSwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj0xMjFmYWU3ODE2NWJhM2Q0FCsAAg8WBB8IBQlDb3VwbGluZ3MfCgUEMTQwMGQQFgNmAgECAhYDFCsAAg8WBB8IBRZCcm93bmluZyAoUikgQ291cGxpbmdzHwoFBDMzMjRkEBYDZgIBAgIWAxQrAAIPFgQfCAUKQ29tcG9uZW50cx8KBQQzMzI2ZGQ'+
        ''+
        '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QQzNjIzZGQCAg8PFgQfCAUeU2VhbG1hc3RlciBCZWFyaW5nIEx1YnJpY2F0b3JzHwoFBDM2MjRkZAIPDxQrAAIUKwADDxYIHwFnHwILKwQBHwBnHwNoZGRkEBYBZhYBFCsAAw8WCB8AZx8BZx8CCysEAR8DaGRkZA8WAWYWAQVxVGVsZXJpay5XZWIuVUkuUmFkV2luZG93LCBUZWxlcmlrLldlYi5VSSwgVmVyc2lvbj0yMDE1LjEuNDAxLjM1LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPTEyMWZhZTc4MTY1YmEzZDQWAmYPFCsAAw8WCB8AZx8BZx8CCysEAR8DaGRkZGQCAw8UKwACFCsAAw8WCB8CCysEAR8AZx8BZx8DaGRkZBAWAmYCARYCFCsAAw8WCB8AZx8BZx8CCysEAR8DaGRkZBQrAAMPFggfAGcfAWcfAgsrBAEfA2hkZGQPFgJmZhYBBXFUZWxlcmlrLldlYi5VSS5SYWRXaW5kb3csIFRlbGVyaWsuV2ViLlVJLCBWZXJzaW9uPTIwMTUuMS40MDEuMzUsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49MTIxZmFlNzgxNjViYTNkNBYEZg8UKwADDxYIHwBnHwFnHwILKwQBHwNoZGRkZAIBDxQrAAMPFggfAGcfAWcfAgsrBAEfA2hkZGRkGAEFHl9fQ29udHJvbHNSZXF1aXJlUG9zdEJhY2tLZXlfXxYHBSpjdGwwMCRNYXN0ZXIkQ29udGVudFBsYWNlSG9sZGVyMSRNZW51UGFuZWwFTmN0bDAwJE1hc3RlciRDb250ZW50UGxhY2VIb2xkZXIxJENvbnRlbnRQbGFjZUhvbGRlck1haW4kUmFkVHJlZVZpZXdQcm9kdWN0TGluZQVPY3RsMDAkTWFzdGVyJENvbnRlbnRQbGFjZUhvbGRlcjEkQ29udGVudFBsYWNlSG9sZGVyTWFpbiRSYWRXaW5kb3dNYW5hZ2VyT3BlblBERgVIY3RsMDAkTWFzdGVyJENvbnRlbnRQbGFjZUhvbGRlcjEkQ29udGVudFBsYWNlSG9sZGVyTWFpbiRSYWRXaW5kb3dPcGVuUERGBTdjdGwwMCRNYXN0ZXIkQ29udGVudFBsYWNlSG9sZGVyMSRSYWRXaW5kb3dNYW5hZ2VyUG9wdXBzBTdjdGwwMCRNYXN0ZXIkQ29udGVudFBsYWNlSG9sZGVyMSRSYWRXaW5kb3dOZW1hU3RhbmRhcmRzBTZjdGwwMCRNYXN0ZXIkQ29udGVudFBsYWNlSG9sZGVyMSRSYWRXaW5kb3dJRUNTdGFuZGFyZHPaIRCby2k3XEO3rRiIseoMWI2BDw==',
        '__VIEWSTATEGENERATOR':'CC83E274',
		'__EVENTVALIDATION':'/wEWBgL4+JvjBALjqMbGAQKW/Y24DgLJ/9mgDgKnipiBAQLyy5/lAuF2uu8b/BgziUqSvX9FGHOhGpdW',
		'ctl00_Master_ContentPlaceHolder1_MenuPanel_ClientState':'{"expandedItems":["0"],"logEntries":[],"selectedItems":[]}',
		'ctl00$Master$ContentPlaceHolder1$ContentPlaceHolderMain$TextBoxPartNumber': row,
		'ctl00$Master$ContentPlaceHolder1$ContentPlaceHolderMain$ButtonPartSearch':'SEARCH >',
		'ctl00_Master_ContentPlaceHolder1_ContentPlaceHolderMain_RadTreeViewProductLine_ClientState':'{"expandedNodes":[],"collapsedNodes":[],"logEntries":[],"selectedNodes":[],"checkedNodes":[],"scrollPosition":0}',
		'ctl00_Master_ContentPlaceHolder1_ContentPlaceHolderMain_RadWindowOpenPDF_ClientState':'',
		'ctl00_Master_ContentPlaceHolder1_ContentPlaceHolderMain_RadWindowManagerOpenPDF_ClientState':'',
		'ctl00_Master_ContentPlaceHolder1_RadWindowNemaStandards_ClientState':'',
		'ctl00_Master_ContentPlaceHolder1_RadWindowIECStandards_ClientState':'',
		'ctl00_Master_ContentPlaceHolder1_RadWindowManagerPopups_ClientState':''
		}
		return FormRequest(url=url, 
							callback=self.parse_item,
							errback=lambda failure: self.request(meta_row),
							dont_filter=True,
							formdata=formdata,
							meta={'meta_row': meta_row}
							)

	def create_item(self, meta_row, cad):
		item = RegalItem()
		item['ids'] = catalog_ids[meta_row]
		item['catalog_number'] = str(meta_row).strip()
		item['cad'] = cad
		return item

	def parse_item(self, response):
		meta_row = response.meta['meta_row']
		if 'Group' in response.url:
			if response.xpath('//*[@id="ctl00_Master_ContentPlaceHolder1_ContentPlaceHolderMain_RadGridSearchResults_ctl00__0"]/td[1]/a[2]/text()').extract_first().lower() == str(meta_row).strip().lower():
				url = response.xpath('//*[@id="ctl00_Master_ContentPlaceHolder1_ContentPlaceHolderMain_RadGridSearchResults_ctl00_ctl04_HyperLinkCADLink"]/@href').extract_first()
				if url:
					return self.download_item(url, meta_row)
		elif 'PartID' in response.url:
		#else:
			url = response.xpath('//*[@title="CAD Drawing"]/@href').extract_first()
			if url:
				print 'url'
				return self.download_item(url, meta_row)
			else:
				print 'create'
				return self.create_item(meta_row, '')
		else:
		    return self.create_item(meta_row, '')

	def download_item(self, url, meta_row):
		print '--------------------'
		formdata={
			'__EVENTTARGET':'Master$ContentPlaceHolder1$ButtonDownload',
			'__EVENTARGUMENT':'',
			'__LASTFOCUS':'',
			'__VIEWSTATE': '',
			'__VIEWSTATEGENERATOR':'F0713377',
			'__EVENTVALIDATION':'/wEWBQKzsfT9BwKXvcT9DgKUvcT9DgKa0t6NAgL92JX2CBo8QY4EPfgogWp7CSIoIhrjOoDj',
			'Master$ContentPlaceHolder1$RadComboBoxFileFormats':'IGES',
			'Master_ContentPlaceHolder1_RadComboBoxFileFormats_ClientState':'{"logEntries":[],"value":"","text":"IGES","enabled":true,"checkedIndices":[],"checkedItemsTextOverflows":false}',
			'Master$ContentPlaceHolder1$RadioButtonListDimension':'3D'
		}
		req = urllib2.Request('http://edge.regalpts.com/edge/CAD/' + url)
		req.add_data(urllib.urlencode(formdata))
		try:
			resp = urllib2.urlopen(req)
			name = '%s.zip' % str(meta_row).strip().replace('/', '_')
			with open('regalpts_download/' + name, 'wb') as file:
				shutil.copyfileobj(resp.fp, file)
		except Exception:
			return self.create_item(meta_row, '')
		else:
			with open('regalpts_download/' + name, 'r') as file:
				file.seek(0, os.SEEK_END)
				if file.tell() == 0:
					os.remove('spiders/regalpts_download/' + name)
					return self.create_item(meta_row, 'error')
			if zipfile.is_zipfile('spiders/regalpts_download/' + name):
				return self.create_item(meta_row, name)
			else:
				return self.request(meta_row)
